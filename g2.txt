start args args_end function_item user_defined_item declaration_stmt return_stmt ar_expression else_stmt method_args_declaration_stmt declaration data_type type array_type compound_stmt stmt_list stmt simple_stmt struct_stmt assign_stmt io_stmt term relational_operator negation_operator logical_operator arithmetic_operator array_const array_const_end if_stmt while_stmt for_stmt io_operation
var ; , : { } = read print [ ] ( ) if break else while meth for IDENTIFIER CONSTANT # and or not > < == != >= <= + - * / % int float string bool int# float# string# bool# => false true & ->
start

start -> compound_stmt

compound_stmt -> { stmt_list }
stmt_list -> stmt | stmt_list stmt
stmt -> simple_stmt | io_stmt ; | struct_stmt | declaration_stmt ;
stmt -> meth IDENTIFIER ( ) { stmt_list }
stmt -> meth IDENTIFIER ( method_args_declaration_stmt ) { stmt_list }
stmt -> meth IDENTIFIER ( ) : data_type { stmt_list }
stmt -> meth IDENTIFIER ( method_args_declaration_stmt ) : data_type { stmt_list }

simple_stmt -> assign_stmt | return_stmt | break
assign_stmt -> IDENTIFIER = ar_expression
io_stmt -> io_operation ( user_defined_item )
return_stmt -> => ar_expression
io_operation -> read | print

struct_stmt -> if_stmt | while_stmt | for_stmt

if_stmt -> if ( ar_expression compound_stmt ; | if ( ar_expression compound_stmt else_stmt | if ( ar_expression stmt ; | if ( ar_expression stmt else_stmt
else_stmt -> else compound_stmt | else stmt

while_stmt -> while ( ar_expression compound_stmt
for_stmt -> for ( assign_stmt ar_expression assign_stmt compound_stmt

relational_operator -> > | < | == | != | >= | <= | logical_operator
negation_operator -> not
logical_operator -> and | or
arithmetic_operator -> + | - | * | / | % | ->

declaration_stmt -> var declaration | declaration_stmt , declaration
method_args_declaration_stmt -> declaration | method_args_declaration_stmt , declaration
declaration -> IDENTIFIER : data_type
data_type -> array_type | type

type -> int | float | string | bool
array_type ->  int# | float# | string# | bool#

ar_expression -> user_defined_item arithmetic_operator ar_expression | user_defined_item relational_operator ar_expression | user_defined_item ; | user_defined_item )

user_defined_item -> term | function_item
function_item -> & IDENTIFIER args
args -> ( term args_end
args_end -> ) | , term )

term -> CONSTANT | array_const | IDENTIFIER | true | false
array_const -> [ CONSTANT array_const_end
array_const_end -> ] | , CONSTANT array_const_end